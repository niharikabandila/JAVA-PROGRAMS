//WE ARE HAVING SEVERAL THREADS IN A PROGRAM WHICH GET EXECUTES SIMULTANEOUSLY AND LEADS TO DATA INCONSISTENCY TO AVOID THIS WE USE SYNCHRONIZED KEYWORD IT EXECUTES
//A THREAD AFTER COMPLETION OF THAT THREAD ONLY ANOTHER THREAD GETS EXECUTED.
class TicketCounter
{
	private int availableseats=3;
	public synchronized void bookTicket(String name,int num_seats)
	{
		if(availableseats>=num_seats && num_seats>0)
		{
			System.out.println("Hi,"+name+":"+num_seats+"Seats booked");
			availableseats-=num_seats;
		}
		else
			System.out.println("Hi,"+name+": Seats not Available");
	}
}
class TicketBookingThread extends Thread
{
	TicketCounter tc;
	String pname;
	int num_seats;
	public TicketBookingThread(TicketCounter tc,String pname,int num_seats)
	{
		this.tc=tc;
		this.pname=pname;
		this.num_seats=num_seats;
	}
	public void run()
	{
		tc.bookTicket(pname, num_seats);
	}
}
public class ThreadSync {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		TicketCounter tc=new TicketCounter();
		TicketBookingThread t1=new TicketBookingThread(tc,"NIHA",2);
		TicketBookingThread t2=new TicketBookingThread(tc,"MAHA",2);	
		t1.start();
		t2.start();
	}

}
//INTER COMMUNICATION
import java.io.*;
class Buffer
{
	String data;
	boolean avail=false;
	public synchronized void put(String data)
	{
		while(avail==true)
		{
			try
			{
				wait();
			}
			catch(InterruptedException ie)
			{
				System.out.println(ie);
			}
		}
		this.data=data;
		System.out.println("Produced:"+data);
		avail=true;
		notify();
	}
	public synchronized String get()
	{
		while(avail==false)
		{
			try
			{
				wait();
			}
			catch(InterruptedException ie)
			{
				System.out.println(ie);
			}
		}
		avail=false;
		notify();
		return data;
	}
}
class Producer extends Thread
{
	String data;
	BufferedReader b=new BufferedReader(new InputStreamReader(System.in));
	Buffer buf;
	public Producer(Buffer buf)
	{
		super("Producer");
		this.buf=buf;
	}
	public void run()
	{
		try
		{
			while(true)
			{
				System.out.println("Enter data:");
				data=b.readLine();
				buf.put(data);
				Thread.sleep(500);//INTERRUPTED EXCEPTION
			}
		}
		catch(Exception e)
		{
			System.out.println(e);
		}
	}
	
}
class Consumer extends Thread
{
	String data;
	BufferedReader b=new BufferedReader(new InputStreamReader(System.in));
	Buffer buf;
	public Consumer(Buffer buf)
	{
		super("Consumer");
		this.buf=buf;
	}
	public void run()
	{
		try
		{
			while(false)
			{
				System.out.println("Concumed:"+buf.get());
				Thread.sleep(500);//INTERRUPTED EXCEPTION
			}
		}
		catch(Exception e)
		{
			System.out.println(e);
		}
	}
	
}
public class InterSync
{
	public void main(String args[])
			{
				Buffer buf=new Buffer();
				Producer p=new Producer(buf);
				Consumer c=new Consumer(buf);
				p.start();
				c.start();
				
			}
}

